#pragma once
#include "MyItem.g.h"
#include <winrt/Windows.UI.Xaml.Data.h>
#include <winrt/Windows.Foundation.h>
#include <string>

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing MyItem.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.

//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::MyApp::implementation
{
    struct MyItem : MyItemT<MyItem>
    {
    private:
        std::uint64_t  _Id{ 0 };
        winrt::hstring _Title;
        winrt::hstring _Subtitle;
        winrt::hstring _Description;

        event<Microsoft::UI::Xaml::Data::PropertyChangedEventHandler> _PropertyChanged;

    public:
        MyItem();
        MyItem(hstring const& title, hstring const& subtitle, hstring const& description);

    public:
        std::uint64_t Id();
        void Id(std::uint64_t const& value);
        hstring Title();
        void Title(hstring const& value);
        hstring Subtitle();
        void Subtitle(hstring const& value);
        hstring Description();
        void Description(hstring const& value);

    public:
        winrt::event_token PropertyChanged(Microsoft::UI::Xaml::Data::PropertyChangedEventHandler const& value);
        void PropertyChanged(winrt::event_token const& token);

    private:
        template <class T>
        void UpdateValue(hstring const& propertyName, T& var, T value)
        {
            if (var != value)
            {
                var = value;
                RaisePropertyChanged(propertyName);
            }
        }

        void RaisePropertyChanged(hstring const& propertyName);
    };
}

namespace winrt::MyApp::factory_implementation
{
    struct MyItem : MyItemT<MyItem, implementation::MyItem>
    {
    };
}
