#pragma once
#include "MyViewModel.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

#include "MyItem.h"

namespace winrt::MyApp::implementation
{
    struct MyViewModel : MyViewModelT<MyViewModel>
    {
    public:
        static winrt::MyApp::MyViewModel Instance();

    private:
		winrt::Windows::Foundation::Collections::IObservableVector<winrt::MyApp::MyItem> _Items;
		std::uint64_t _MainWindow;

    public:
        MyViewModel();
        virtual ~MyViewModel();

    public:
        winrt::Windows::Foundation::Collections::IObservableVector<winrt::MyApp::MyItem> Items();
        void UpdateItems();
		std::uint64_t MainWindowHandle() const noexcept { return _MainWindow; }
		void MainWindowHandle(std::uint64_t value) noexcept { _MainWindow = value; }

    };
}

namespace winrt::MyApp::factory_implementation
{
    struct MyViewModel : MyViewModelT<MyViewModel, implementation::MyViewModel>
    {
    };
}
